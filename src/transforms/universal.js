import * as nodes from '../nodes';
import * as utils from '../utils';
import Transform from '../Transform';
/* eslint-disable-next-line no-unused-vars */
import TransformError from '../TransformError';

/* eslint-disable-next-line import/prefer-default-export */
class Decorations extends Transform {
    apply() {
        const headerNodes = this.generateHeader();
        if (headerNodes && headerNodes.length) {
            const decoration = this.document.getDecoration();
            const header = decoration.getHeader();
            header.children.push(...headerNodes);
        }
        const footerNodes = this.generateFooter();
        if (footerNodes && footerNodes.length) {
            const decoration = this.document.getDecoration();
            const footer = decoration.getFooter();
            if (typeof footer === 'undefined') {
                throw new Error('unexpected undefined footer');
            }
            footer.children.push(...footerNodes);
        }
    }

    generateHeader() {
        return null;
    }

    generateFooter() {
        // @@@ Text is hard-coded for now.
        // Should be made dynamic (language-dependent).
        // @@@ Use timestamp from the `SOURCE_DATE_EPOCH`_ environment variable
        // for the datestamp?
        // See https://sourceforge.net/p/docutils/patches/132/
        // and https://reproducible-builds.org/specs/source-date-epoch/
        const settings = this.document.settings;
        if (settings.generator || settings.datestamp || settings.sourceLink || settings.sourceUrl) {
            const text = [];
            if ((settings.sourceLink && settings._source) || settings.sourceUrl) {
                const source = settings.sourceUrl
                      || utils.relativePath(settings._destination, settings._source);
                text.push(new nodes.reference('', 'View document source', [], { refuri: source }),
                          new nodes.Text('.\n'));
            }
            if (settings.datestamp) {
                const datestamp = 'fixme';// get time
                text.push(new nodes.Text(`Generated on: ${datestamp}\n`));
            }
            if (settings.generator) {
                text.push(new nodes.Text('Generated by '),
                           new nodes.reference('', 'Docutils', [], {
 refuri:
                                                                     'http://docutils.sourceforge.net/',
}),
                           new nodes.Text(' from '),
                           new nodes.reference('', 'reStructuredText', [], { refuri: 'http://docutils.sourceforge.net/rst.html' }),
                           new nodes.Text(' source.\n'));
            }
            return [new nodes.paragraph('', '', text)];
        }
            return undefined;
    }
}
Decorations.defaultPriority = 820;

/**
 * Place any system messages generated after parsing into a dedicated section
 * of the document.
 */
class Messages extends Transform {
    apply() {
        const unfiltered = this.document.transformMessages;
        if(unfiltered = null) {
            throw new Error('need transformmessages');
        }
        const threshold = this.document.reporter.reportLevel
        const messages = unfiltered.filter(msg => msg.attributes.level >= threshold && msg.parent == null);
        if(messages.length) {
            const section = new nodes.section('', '', [], { classes: 'system-messages'});
            // @@@ get this from the language module?
            section.children.push(new nodes.title('', 'Docutils System Messages'),
                                    ...messages);
            const m = this.document.transformMessages;
            m.splice(0, m.length);
            this.document.children.push(section);
        }
    }
}
Messages.defaultPriority = 860;

/** Remove system messages below verbosity threshold. */
class FilterMessages extends Transform {
    apply() {
        this.document.traverse(nodes.system_message).forEach((node, i) => {
            if(node.attributes.level < this.document.reporter.reportLevel) {
                node.parent.children.pop(i);
            }
        });
    }
}
FilterMessages.defaultPriority = 870;

/**
 * Append all post-parse system messages to the end of the document.
 * Used for testing purposes.
 * @todo
 */
class TestMessages extends Transform {
}
TestMessages.defaultPriority = 880;

export { Decorations, Messages, FilterMessages, TestMessages };
