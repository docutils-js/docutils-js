import * as nodes from '../nodes';
import * as utils from '../utils';
import Transform from '../Transform';
import TransformError from '../TransformError';

export class Decorations extends Transform {
    apply() {
        const headerNodes = this.generateHeader();
        if (headerNodes && headerNodes.length) {
            const decoration = this.document.getDecoration();
            const header = decoration.getHeader();
            header.children.push(...headerNodes);
        }
        const footerNodes = this.generateFooter();
        if (footerNodes && footerNodes.length) {
            const decoration = this.document.getDecoration();
            const footer = decoration.getFooter();
            if (typeof footer === 'undefined') {
                throw new Error('unexpected undefined footer');
            }
            footer.children.push(...footerNodes);
        }
    }

    generateHeader() {
        return null;
    }

    generateFooter() {
        // @@@ Text is hard-coded for now.
        // Should be made dynamic (language-dependent).
        // @@@ Use timestamp from the `SOURCE_DATE_EPOCH`_ environment variable
        // for the datestamp?
        // See https://sourceforge.net/p/docutils/patches/132/
        // and https://reproducible-builds.org/specs/source-date-epoch/
        const settings = this.document.settings;
        if (settings.generator || settings.datestamp || settings.sourceLink || settings.sourceUrl) {
            const text = [];
            if ((settings.sourceLink && settings._source) || settings.sourceUrl) {
                const source = settings.sourceUrl || utils.relativePath(settings._destination, settings._source);
                text.push(new nodes.reference('', 'View document source', [], { refuri: source }),
                          new nodes.Text('.\n'));
            }
            if (settings.datestamp) {
                const datestamp = 'fixme';// get time
                text.push(new nodes.Text(`Generated on: ${datestamp}\n`));
            }
            if (settings.generator) {
                text.push(new nodes.Text('Generated by '),
                           new nodes.reference('', 'Docutils', [], {
 refuri:
                                                                     'http://docutils.sourceforge.net/',
}),
                           new nodes.Text(' from '),
                           new nodes.reference('', 'reStructuredText', [], { refuri: 'http://docutils.sourceforge.net/rst.html' }),
                           new nodes.Text(' source.\n'));
            }
            return [new nodes.paragraph('', '', text)];
        }
            return undefined;
    }
}
Decorations.defaultPriority = 820;
