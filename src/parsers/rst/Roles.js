import * as nodes from '../../nodes';
import * as directives from './directives';

const DEFAULT_INTERPRETED_ROLE = 'title-reference'

const _role_registry = {}
const _roles = {};


class GenericRole{
    constructor(roleName, nodeClass) {
	this.name = roleName;
	this.nodeClass = nodeClass;
    }

    invoke(role, rawtext, text, lineno, inliner, options, content) {
	const myOptions = options || {};
	setClasses(myOptions);
	return [[ new this.nodeClass(rawtext, unescape(text), [], myOptions)], []]
    }
}

function role(role_name, language_module, lineno, reporter) {
    /*"""
    Locate and return a role function from its language-dependent name, along
    with a list of system messages.  If the role is not found in the current
    language, check English.  Return a 2-tuple: role function (``None`` if the
    named role cannot be found) and a list of system messages.
    """*/
    const normname = role_name.toLowerCase()
    const messages = []
    const msg_text = []

    if(normname in _roles) {
        return [_roles[normname], messages];
    }

    let canonicalname;
    if(role_name) {
        try {
            canonicalname = language_module.roles[normname]
	} catch(error) {
/*
	    
        except AttributeError, error:
            msg_text.append('Problem retrieving role entry from language '
                            'module %r: %s.' % (language_module, error))
        except KeyError:
            msg_text.append('No role entry for "%s" in module "%s".'
                            % (role_name, language_module.__name__))
*/
            canonicalname = DEFAULT_INTERPRETED_ROLE;
	}
    }

    //# If we didn't find it, try English as a fallback.
    /*
    if(! canonicalname) {
	try {
            canonicalname = _fallback_language_module.roles[normname]
            msg_text.append('Using English fallback for role "%s".'
                            % role_name)
        except KeyError:
            msg_text.append('Trying "%s" as canonical role name.'
                            % role_name)
            # The canonical name should be an English name, but just in case:
            canonicalname = normname
    */
    // Collect any messages that we generated.
    if(msg_text.length) {
        const message = reporter.info(msg_text.join('\n'), [], { line: lineno });
        messages.append(message);
    }

    //# Look the role up in the registry, and return it.
    if(canonicalname in _role_registry) {
        const role_fn = _role_registry[canonicalname]
        register_local_role(normname, role_fn)
        return [ role_fn, messages ]
    } else {
        return [ undefined, messages ]; // Error message will be generated by caller.
    }
}
function register_local_role(name, role_fn) {
/*   
    """
    Register an interpreted text role by its local or language-dependent name.

    :Parameters:
      - `name`: The local or language-dependent name of the interpreted role.
      - `role_fn`: The role function.  See the module docstring.
    """*/
    set_implicit_options(role_fn)
    _roles[name] = role_fn
}


function setClasses(options) {
    if('class' in options) {
	options.classes = options['class'];
	delete options['class'];
    }
}
function register_canonical_role(name, role_fn) {
    /*"""
    Register an interpreted text role by its canonical name.

    :Parameters:
      - `name`: The canonical name of the interpreted role.
      - `role_fn`: The role function.  See the module docstring.
    """*/
    set_implicit_options(role_fn)
    _role_registry[name] = role_fn
}

function set_implicit_options(role_fn) {
    /*"""
    Add customization options to role functions, unless explicitly set or
    disabled.
    """*/
    if(!role_fn.hasOwnProperty('options') || role_fn.options == null) {
        role_fn.options = {'class': directives.class_option };
    } else if(!('class' in role_fn.options)) {
        role_fn.options['class'] = directives.class_option;
    }
}

function register_generic_role(canonical_name, node_class) {
    //"""For roles which simply wrap a given `node_class` around the text."""
    const role = new GenericRole(canonical_name, node_class)
    register_canonical_role(canonical_name, role)
}

register_generic_role('abbreviation', nodes.abbreviation)
register_generic_role('acronym', nodes.acronym)
register_generic_role('emphasis', nodes.emphasis)
register_generic_role('literal', nodes.literal)
register_generic_role('strong', nodes.strong)
register_generic_role('subscript', nodes.subscript)
register_generic_role('superscript', nodes.superscript)
register_generic_role('title-reference', nodes.title_reference)

export { role };
