import { OptionParser as OptionParserBase } from './OptParse';
import SettingsSpec from './SettingsSpec';

/* istanbul ignore function */
function validate_strip_class() {
}


/* istanbul ignore function */
function store_multiple() {
}

/* istanbul ignore function */
function validate_boolean() {
}
/* istanbul ignore function */
function validate_threshold() {
}
/* istanbul ignore function */
function validate_encoding_and_error_handler() {
}
/* istanbul ignore function */
function validate_encoding_error_handler() {
}
/* istanbul ignore function */
function validate_dependency_file() {
}
/* istanbul ignore function */
function validate_colon_separated_string_list() {
}
/* istanbul ignore function */
function read_config_file() {
}

const SUPPRESS_HELP = Symbol.for('SUPPRESS_HELP');

export class OptionParser extends OptionParserBase {
    constructor() {
	super();
	this.standardConfigFiles = [
            '/etc/docutils.conf', // system-wide
            './docutils.conf', // project-specific
            '~/.docutils']; // user-specific

	const threshold_choices = 'info 1 warning 2 error 3 severe 4 none 5'.split();
	const True = true;
	const False = false;
	const thresholds = {
 info: 1, warning: 2, error: 3, severe: 4, none: 5,
};
	const booleans = {
 1: True,
on: True,
yes: True,
true: True,
			    0: False,
off: False,
no: False,
false: False,
'': False,
};
	const default_error_encoding = /* getattr(sys.stderr, 'encoding',
                                     None) or locale_encoding or */'ascii';

	const default_error_encoding_error_handler = 'backslashreplace';

	this.settingsSpec = ['General Docutils Options',
                      null,
                      [['Specify the document title as metadata.',
                         ['--title'], {}],
                        ['Include a "Generated by Docutils" credit and link.',
                         ['--generator', '-g'], {
 action: 'store_true',
                                                 validator: validate_boolean,
}],
         ['Do not include a generator credit.',
          ['--no-generator'], { action: 'store_false', dest: 'generator' }],
         ['Include the date at the end of the document [UTC].',
          ['--date', '-d'], {
action: 'store_const',
const: '%Y-%m-%d',
                             dest: 'datestamp',
}],
         ['Include the time & date [UTC].',
          ['--time', '-t'], {
 action: 'store_const',
                             const: '%Y-%m-%d %H:%M UTC',
                             dest: 'datestamp',
}],
         ['Do not include a datestamp of any kind.',
          ['--no-datestamp'], {
action: 'store_const',
const: null,
                               dest: 'datestamp',
}],
         ['Include a "View document source" link.',
          ['--source-link', '-s'], {
 action: 'store_true',
                                    validator: validate_boolean,
}],
         ['Use <URL> for a source link; implies --source-link.',
          ['--source-url'], { metavar: '<URL>' }],
         ['Do not include a "View document source" link.',
          ['--no-source-link'],
          {
action: 'callback',
callback: store_multiple,
           callback_args: ['source_link', 'source_url'],
}],
         ['Link from section headers to TOC entries.  [default]',
          ['--toc-entry-backlinks'],
          {
 dest: 'toc_backlinks',
action: 'store_const',
const: 'entry',
           default: 'entry',
}],
         ['Link from section headers to the top of the TOC.',
          ['--toc-top-backlinks'],
          { dest: 'toc_backlinks', action: 'store_const', const: 'top' }],
         ['Disable backlinks to the table of contents.',
          ['--no-toc-backlinks'],
          { dest: 'toc_backlinks', action: 'store_false' }],
         ['Link from footnotes/citations to references. [default]',
          ['--footnote-backlinks'],
          {
 action: 'store_true',
default: 1,
           validator: validate_boolean,
}],
         ['Disable backlinks from footnotes and citations.',
          ['--no-footnote-backlinks'],
          { dest: 'footnote_backlinks', action: 'store_false' }],
         ['Enable section numbering by Docutils.  [default]',
          ['--section-numbering'],
          {
 action: 'store_true',
dest: 'sectnum_xform',
           default: 1,
validator: validate_boolean,
}],
         ['Disable section numbering by Docutils.',
          ['--no-section-numbering'],
          { action: 'store_false', dest: 'sectnum_xform' }],
         ['Remove comment elements from the document tree.',
          ['--strip-comments'],
          { action: 'store_true', validator: validate_boolean }],
         ['Leave comment elements in the document tree. [default]',
          ['--leave-comments'],
          { action: 'store_false', dest: 'strip_comments' }],
         ['Remove all elements with classes="<class>" from the document tree. '
          + 'Warning: potentially dangerous; use with caution. '
          + '[Multiple-use option.]',
          ['--strip-elements-with-class'],
          {
action: 'append',
dest: 'strip_elements_with_classes',
           metavar: '<class>',
validator: validate_strip_class,
}],
         ['Remove all classes="<class>" attributes from elements in the '
          + 'document tree. Warning: potentially dangerous; use with caution. '
          + '[Multiple-use option.]',
          ['--strip-class'],
          {
 action: 'append',
dest: 'strip_classes',
           metavar: '<class>',
validator: validate_strip_class,
}],
         ['Report system messages at or higher than <level>: "info" or "1", '
          + '"warning"/"2" [default], "error"/"3", "severe"/"4", "none"/"5"',
          ['--report', '-r'], {
 choices: threshold_choices,
default: 2,
                               dest: 'report_level',
metavar: '<level>',
                               validator: validate_threshold,
}],
         ['Report all system messages.  [Same as "--report=1".]',
          ['--verbose', '-v'], {
 action: 'store_const',
const: 1,
                                dest: 'report_level',
}],
         ['Report no system messages.  [Same as "--report=5".]',
          ['--quiet', '-q'], {
action: 'store_const',
const: 5,
                              dest: 'report_level',
}],
         ['Halt execution at system messages at or above <level>.  '
          + 'Levels as in --report.  Default: 4 [severe].',
          ['--halt'], {
 choices: threshold_choices,
dest: 'halt_level',
                       default: 4,
metavar: '<level>',
                       validator: validate_threshold,
}],
         ['Halt at the slightest problem.  Same as "--halt=info".',
          ['--strict'], {
action: 'store_const',
const: 1,
                         dest: 'halt_level',
}],
         ['Enable a non-zero exit status for non-halting system messages at '
          + 'or above <level>.  Default: 5 [disabled].',
          ['--exit-status'], {
 choices: threshold_choices,
                              dest: 'exit_status_level',
                              default: 5,
metavar: '<level>',
                              validator: validate_threshold,
}],
         ['Enable debug-level system messages and diagnostics.',
          ['--debug'], { action: 'store_true', validator: validate_boolean }],
         ['Disable debug output.  [default]',
          ['--no-debug'], { action: 'store_false', dest: 'debug' }],
         ['Send the output of system messages to <file>.',
          ['--warnings'], { dest: 'warning_stream', metavar: '<file>' }],
         ['Enable Python tracebacks when Docutils is halted.',
          ['--traceback'], {
 action: 'store_true',
default: null,
                            validator: validate_boolean,
}],
         ['Disable Python tracebacks.  [default]',
          ['--no-traceback'], { dest: 'traceback', action: 'store_false' }],
         ['Specify the encoding and optionally the '
          + 'error handler of input text.  Default: <locale-dependent>:strict.',
          ['--input-encoding', '-i'],
          {
metavar: '<name[:handler]>',
           validator: validate_encoding_and_error_handler,
}],
         ['Specify the error handler for undecodable characters.  '
          + 'Choices: "strict" [default], "ignore", and "replace".',
          ['--input-encoding-error-handler'],
          { default: 'strict', validator: validate_encoding_error_handler }],
         ['Specify the text encoding and optionally the error handler for '
          + 'output.  Default: UTF-8:strict.',
          ['--output-encoding', '-o'],
          {
 metavar: '<name[:handler]>',
default: 'utf-8',
           validator: validate_encoding_and_error_handler,
}],
         ['Specify error handler for unencodable output characters; '
          + '"strict" [default], "ignore", "replace", '
          + '"xmlcharrefreplace", "backslashreplace".',
          ['--output-encoding-error-handler'],
          { default: 'strict', validator: validate_encoding_error_handler }],
         ['Specify text encoding and error handler for error output.  '
          + `${'Default: %s:%s.'
          % [default_error_encoding, default_error_encoding_error_handler]}`,
          ['--error-encoding', '-e'],
          {
 metavar: '<name[:handler]>',
default: default_error_encoding,
           validator: validate_encoding_and_error_handler,
}],
         [`${'Specify the error handler for unencodable characters in '
          + 'error output.  Default: '}${default_error_encoding_error_handler}.`,
          ['--error-encoding-error-handler'],
          {
default: default_error_encoding_error_handler,
           validator: validate_encoding_error_handler,
}],
         ['Specify the language [as BCP 47 language tag].  Default: en.',
          ['--language', '-l'], {
 dest: 'language_code',
default: 'en',
                                 metavar: '<name>',
}],
         ['Write output file dependencies to <file>.',
          ['--record-dependencies'],
          {
 metavar: '<file>',
validator: validate_dependency_file,
           default: null,
}], // default set in Values class
         ['Read configuration settings from <file>, if it exists.',
          ['--config'], {
metavar: '<file>',
type: 'string',
                         action: 'callback',
callback: read_config_file,
}],
         ["Show this program's version number and exit.",
          ['--version', '-V'], { action: 'version' }],
         ['Show this help message and exit.',
          ['--help', '-h'], { action: 'help' }],
// Typically not useful for non-programmatical use:
         [SUPPRESS_HELP, ['--id-prefix'], { default: '' }],
         [SUPPRESS_HELP, ['--auto-id-prefix'], { default: 'id' }],
// Hidden options, for development use only:
         [SUPPRESS_HELP, ['--dump-settings'], { action: 'store_true' }],
         [SUPPRESS_HELP, ['--dump-internals'], { action: 'store_true' }],
         [SUPPRESS_HELP, ['--dump-transforms'], { action: 'store_true' }],
         [SUPPRESS_HELP, ['--dump-pseudo-xml'], { action: 'store_true' }],
         [SUPPRESS_HELP, ['--expose-internal-attribute'],
          {
 action: 'append',
dest: 'expose_internals',
           validator: validate_colon_separated_string_list,
}],
         [SUPPRESS_HELP, ['--strict-visitor'], { action: 'store_true' }],
		      ]];

	this.settingsDefaults = {
_disable_config: null,
				 _source: null,
				 _destination: null,
				 _config_files: null,
};
    }

    /*
     * For each component, first populate from the `SettingsSpec.settings_spec`
     * structure, then from the `SettingsSpec.settings_defaults` dictionary.
     * After all components have been processed, check for and populate from
     * each component's `SettingsSpec.settings_default_overrides` dictionary.
     */
    populateFromComponents(components) {
	components.filter(a => a != null).forEach((component) => {
            const settingsSpec = component.settingsSpec;
            this.relativePathSettings.push(...component.relativePathSettings);
	    for (i = 0; i < settingsSpec.length; i += 3) {
                const [title, description, option_spec] = settings_spec;
                if (title) {
                    // group = optparse.OptionGroup(self, title, description)
                    // self.add_option_group(group)
		} else {
                    group = this; // single options
		}
		/*
                for (help_text, option_strings, kwargs) in option_spec:
                    option = group.add_option(help=help_text, *option_strings,
                                              **kwargs)
                    if kwargs.get('action') == 'append':
                        self.lists[option.dest] = 1
		*/
                if (component.settingsDefaults) {
                    // this.defaults.update(component.settings_defaults)
		}
	    }
	});
	/* for component in components:
            if component and component.settings_default_overrides:
                self.defaults.update(component.settings_default_overrides)
	*/
    }

    checkArgs(args) {
	let source; let
destination;
	if (args.length) {
	    source = args.pop(0);
	    if (source === '-') {
		source = null;
	    }
	}
	if (args.length) {
	    destinaton = args.pop(0);
	    if (destination === '-') {
		destination = null;
	    }
	}
	return [source, destination];
    }

    checkValues(values, args) {
	const [_source, _destination] = this.checkArgs(args);
	//	b//makePathsAbsolute(//
	values._configFiles = this.configFiles;
	values._source = _source;
	values._destination = _destination;
	return values;
    }
}
