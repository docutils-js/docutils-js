import BaseWriter from '../Writer';
import { GenericNodeVisitor } from '../nodes';
import * as docutils from '../index';
import * as nodes from '../nodes';

function escapeXml(unsafe) {
    console.log(`unsafe is ${unsafe}`);
    if (typeof unsafe === 'undefined') {
        throw new Error('need unsafE');
    }
    return unsafe.replace(/[<>&'"]/g, (c) => {
        switch (c) {
            case '<': return '&lt;';
            case '>': return '&gt;';
            case '&': return '&amp;';
            case '\'': return '&apos;';
            case '"': return '&quot;';
        }
    });
}
class XMLTranslator extends GenericNodeVisitor {
    constructor(document) {
        super(document);
        this.generator = `<!-- generated by Docutils ${docutils.__version__} -->\n`;
        this.document = document;
        this.warn = this.document.reporter.warning;
        this.error = this.document.reporter.error;

        const settings = this.settings = document.settings;
        this.indent = this.newline = '';
        if (settings.newlines) {
            this.newline = '\n';
        }
        if (settings.indents) {
            this.newline = 'n';
            this.indent = '    ';
        }
        this.level = 0;
        this.inSimple = 0;
        this.fixedText = 0;
        this.output = [];
        if (settings.xmlDeclaration) {
            this.output.push(this.xmlDeclaration(settings.outputEncoding));
        }
        if (settings.doctypeDeclaration) {
            this.output.push(this.doctype);
        }
        this.output.push(this.generator);
    }

    default_visit(node) {
        this.simple_nodes = [nodes.TextElement];// ,                    nodes.image, nodes.colspec, nodes.transition]
        if (!this.inSimple) {
            this.output.push(Array(this.level + 1).join(this.indent));
        }
        this.output.push(node.starttag());
        this.level += 1;
        // fixme should probably pick this code up
        if (false) { // node instanceof nodes.FixedTextElement || node instanceof nodes.literal) {
            this.fixedText += 1;
        } else {
            for (const nt of this.simple_nodes) {
                if (node instanceof nt) {
                    this.inSimple += 1;
                    break;
                }
            }
        }
        if (!this.inSimple) {
            this.output.push('\n');
        }
    }

    default_departure(node) {
        this.level -= 1;
        if (!this.inSimple) {
            this.output.push(Array(this.level + 1).join(this.indent));
        }
        this.output.push(node.endtag());
//      if(node instanceof nodes['FixedTextElement'] || node instanceof nodes.literal) {
//          this.fixedText -= 1;
//      }
        // bla
    }

    visit_Text(node) {
        const text = escapeXml(node.astext());
        this.output.push(text);
    }

    depart_Text(node) {
    }
}


export default class Writer extends BaseWriter {
    constructor(args) {
        super(args);
        this.translatorClass = XMLTranslator;
    }

    translate() {
        const TranslatorClass = this.translatorClass;
        const visitor = new TranslatorClass(this.document);
        this.visitor = visitor;
        this.document.walkabout(visitor);
        this.output = visitor.output.join('');
        console.log(this.output);
    }
}

Writer.settingsSpec = [
    '"Docutils XML" Writer Options',
    null,
    [['Generate XML with newlines before and after tags.',
      ['--newlines'],
      { action: 'store_true', validator: 'frontend.validate_boolean' }],
     ['Generate XML with indents and newlines.',
      ['--indents'], // #@ TODO use integer value for number of spaces?
      { action: 'store_true', validator: 'frontend.validate_boolean' }],
     ['Omit the XML declaration.  Use with caution.',
      ['--no-xml-declaration'],
      {
dest: 'xml_declaration',
default: 1,
action: 'store_false',
       validator: 'frontend.validate_boolean',
}],
     ['Omit the DOCTYPE declaration.',
      ['--no-doctype'],
      {
 dest: 'doctype_declaration',
default: 1,
       action: 'store_false',
validator: 'frontend.validate_boolean',
}]]];
